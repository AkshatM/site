---
import BaseHead from '../components/BaseHead.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../consts';
import Headshot from '../assets/professional-photo.jpg';
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} image={Headshot} />
		<style>
			.sr-only {
				position: absolute;
				width: 1px;
				height: 1px;
				padding: 0;
				margin: -1px;
				overflow: hidden;
				clip: rect(0, 0, 0, 0);
				white-space: nowrap;
				border: 0;
			}
		</style>
	</head>
	<body class="text-black bg-[#F5F5F5] dark:text-white dark:bg-[#1C1C1C]">
		<header role="banner">
		<nav role="navigation" aria-label="Site navigation">
			<!-- Hamburger Menu -->
			<div class="fixed bottom-4 right-4 z-50">
				<!-- Hamburger Button -->
				<button 
					id="hamburgerToggle"
					class="p-2 rounded-full bg-black/20 dark:bg-white/20 hover:bg-black/30 dark:hover:bg-white/30 transition-all duration-200 backdrop-blur-sm"
					aria-label="Open site navigation menu"
					aria-expanded="false"
					aria-haspopup="menu"
					aria-controls="hamburgerDropdown"
				>
					<!-- Hamburger Icon -->
					<svg 
						class="w-5 h-5 text-black dark:text-white" 
						fill="none" 
						stroke="currentColor" 
						viewBox="0 0 24 24"
						alt="Hamburger menu icon"
					>
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
					</svg>
				</button>
				
				<!-- Dropdown Menu -->
				<div 
					id="hamburgerDropdown"
					role="menu"
					aria-labelledby="hamburgerToggle"
					class="absolute bottom-full right-0 mb-2 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 min-w-[163px] opacity-0 invisible transform translate-y-2 transition-all duration-200 ease-out"
				>
					<button 
						id="darkModeToggle"
						role="menuitem"
						aria-label="Toggle between light and dark theme"
						class="w-full px-4 py-3 text-left text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors duration-150"
					>
						Toggle dark mode
					</button>
				</div>
			</div>
		</nav>
		</header>
		<main role="main" aria-label="Main content">
			<div class="flex flex-col min-h-screen font-[Lora] align-center p-[2rem] gap-[3rem]">
            <slot />
			</div>
		</main>

		<script>
			// Hamburger menu and dark mode functionality
			const hamburgerToggle = document.getElementById('hamburgerToggle');
			const hamburgerDropdown = document.getElementById('hamburgerDropdown');
			const darkModeToggle = document.getElementById('darkModeToggle');
			const html = document.documentElement;
			let isDropdownOpen = false;

			// Check for saved theme preference or default to light mode
			const savedTheme = localStorage.getItem('theme');
			if (savedTheme) {
				html.classList.toggle('dark', savedTheme === 'dark');
			} else {
				// Check system preference
				const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
				html.classList.toggle('dark', prefersDark);
			}

			// Toggle hamburger dropdown
			function toggleDropdown() {
				if (!hamburgerDropdown || !hamburgerToggle) return;
				isDropdownOpen = !isDropdownOpen;
				
				// Update ARIA attributes
				hamburgerToggle.setAttribute('aria-expanded', isDropdownOpen.toString());
				
				if (isDropdownOpen) {
					hamburgerDropdown.classList.remove('opacity-0', 'invisible', 'translate-y-2');
					hamburgerDropdown.classList.add('opacity-100', 'visible', 'translate-y-0');
				} else {
					hamburgerDropdown.classList.add('opacity-0', 'invisible', 'translate-y-2');
					hamburgerDropdown.classList.remove('opacity-100', 'visible', 'translate-y-0');
				}
			}

			// Hamburger button click handler
			hamburgerToggle?.addEventListener('click', (e) => {
				e.stopPropagation();
				toggleDropdown();
			});

			// Dark mode toggle handler
			darkModeToggle?.addEventListener('click', () => {
				const isDark = html.classList.contains('dark');
				html.classList.toggle('dark', !isDark);
				localStorage.setItem('theme', !isDark ? 'dark' : 'light');
				// Close dropdown after toggling
				toggleDropdown();
			});

			// Close dropdown when clicking outside
			document.addEventListener('click', (e) => {
				if (isDropdownOpen && hamburgerToggle && hamburgerDropdown && e.target instanceof Node) {
					if (!hamburgerToggle.contains(e.target) && !hamburgerDropdown.contains(e.target)) {
						toggleDropdown();
					}
				}
			});

			// Close dropdown on escape key
			document.addEventListener('keydown', (e) => {
				if (e.key === 'Escape' && isDropdownOpen) {
					toggleDropdown();
				}
			});
		</script>
	</body>
</html>